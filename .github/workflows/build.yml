name: Build & Deploy WFDD Mini

on:
  workflow_dispatch:
  schedule:
    # 11:05 UTC = 07:05 America/New_York (standard); adjust as needed
    - cron:  "5 11 * * *"

permissions:
  contents: write
  pages: write
  id-token: write

env:
  TZ: America/New_York
  NODE_VERSION: 18

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install deps
        run: |
          echo "📦 Installing dependencies..."
          npm ci
          echo "✅ Dependencies installed"

      - name: Ensure folders
        run: |
          mkdir -p public/puzzles
          mkdir -p data

      - name: Generate today's puzzle (skip if exists)
        id: gen
        env:
          LLM_ENABLED: ${{ secrets.LLM_ENABLED || 'false' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: gpt-4o-mini
          NODE_ENV: production
        run: |
          TODAY=$(date +'%Y-%m-%d')
          PUZ="public/puzzles/${TODAY}.json"
          echo "Today's date: $TODAY"
          echo "Looking for puzzle: $PUZ"
          if [ -f "$PUZ" ]; then
            echo "already=true" >> $GITHUB_OUTPUT
            echo "✅ Puzzle already exists: $PUZ"
          else
            echo "already=false" >> $GITHUB_OUTPUT
            echo "🎲 Generating new puzzle..."
            echo "Environment: LLM_ENABLED=$LLM_ENABLED"
            echo "Working directory: $(pwd)"
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            
            # Check required files exist
            echo "📁 Checking required files..."
            ls -la data/stopwords.txt || echo "❌ stopwords.txt missing"
            ls -la scripts/generate.js || echo "❌ generate.js missing"
            ls -la scripts/llmClues.js || echo "❌ llmClues.js missing"
            
            # Run generator with more verbose output and error capture
            echo "Running: npm run generate"
            set -e  # Exit on any error
            npm run generate 2>&1 | tee generator.log || {
              echo "❌ Generator command failed with exit code $?"
              echo "📄 Generator log output:"
              cat generator.log || echo "No log file"
              echo "📂 Current directory contents:"
              ls -la
              echo "📁 Public directory contents:"
              ls -la public/ || echo "public directory does not exist"
              echo "📁 Scripts directory contents:"  
              ls -la scripts/ || echo "scripts directory does not exist"
              echo "📁 Data directory contents:"
              ls -la data/ || echo "data directory does not exist"
              exit 1
            }
            
            # Check if puzzle file was created
            echo "Checking for puzzle file: $PUZ"
            if [ -f "$PUZ" ]; then
              echo "✅ Puzzle generated successfully: $PUZ"
              echo "📄 Puzzle preview:"
              head -10 "$PUZ"
            else
              echo "❌ Generator did not create $PUZ"
              echo "📁 Contents of public/puzzles/:"
              ls -la public/puzzles/ || echo "puzzles directory does not exist"
              echo "📁 All files in public/:"
              find public/ -type f -name "*.json" 2>/dev/null || echo "No JSON files in public/"
              exit 1
            fi
          fi

      - name: Prune old puzzles (>120 days)
        run: |
          echo "🗑️ Pruning old puzzles (>120 days)..."
          if [ -d "public/puzzles" ]; then
            # Count existing puzzles
            puzzle_count=$(find public/puzzles -type f -name '*.json' 2>/dev/null | wc -l)
            echo "Found $puzzle_count existing puzzles"
            
            if [ "$puzzle_count" -gt 0 ]; then
              # Find and remove old puzzles
              find public/puzzles -type f -name '*.json' 2>/dev/null | while read f; do
                if [ -n "$f" ]; then
                  base=$(basename "$f" .json)
                  if date -d "$base" >/dev/null 2>&1; then
                    cutoff=$(date -d "120 days ago" +%s)
                    stamp=$(date -d "$base" +%s)
                    if [ "$stamp" -lt "$cutoff" ]; then
                      echo "Removing old puzzle: $f"
                      rm -f "$f"
                    fi
                  fi
                fi
              done || echo "No old puzzles to remove"
            else
              echo "No puzzles found to prune"
            fi
          else
            echo "public/puzzles directory does not exist"
          fi
          echo "✅ Pruning completed"

      - name: Commit changes
        if: steps.gen.outputs.already == 'false'
        run: |
          git config user.name  "wfdd-mini-bot"
          git config user.email "wfdd-mini-bot@users.noreply.github.com"
          git add public/puzzles/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: add puzzle $(date +'%Y-%m-%d')"
            git push
            echo "✅ Changes committed and pushed"
          fi

      - name: Prepare for Pages deployment
        run: |
          echo "📁 Preparing GitHub Pages deployment..."
          echo "Root directory contents:"
          ls -la
          echo "📄 Checking for index.html:"
          ls -la index.html || echo "❌ index.html not found"
          echo "📁 Public directory contents:"
          ls -la public/ || echo "❌ public directory not found"
          echo "🧩 Checking for puzzle files:"
          ls -la public/puzzles/ || echo "❌ puzzles directory not found"

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4